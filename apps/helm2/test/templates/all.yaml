apiVersion: v1
kind: ConfigMap
metadata:
  name: my-nginx-helm
data:  
  nginx.conf: |
    events {}
    env MY_SECRET;
    http {
        server {
            listen 8080;
            location / {
                set_by_lua $my_secret 'return os.getenv("MY_SECRET")';
                return 200 $my_secret;
            }
        }
    }
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: my-nginx
#   annotations:

#     # Our special annotation to tell AVP where the secrets are
#     avp.kubernetes.io/path: "clouds/ibmcloud/test-account/keys/api"
# stringData:  
#   MY_SECRET: <password>
# ---

---
apiVersion: v1
kind: Secret
metadata:
  name: my-nginx-helm-one
  annotations:
    avp.kubernetes.io/kv-version: "1"
    avp.kubernetes.io/path: "development/data/apikey"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ include "registry1.password1" . }}

---
apiVersion: v1
kind: Secret
metadata:
  name: my-nginx-helm-two
  annotations:
    avp.kubernetes.io/kv-version: "1"
    avp.kubernetes.io/path: "development/data/apikey"
# type: Opaque
stringData:
  MY_SECRET: {{ include "registry2.password2" . }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx-helm
spec:
  selector:
    matchLabels:
      app: nginx-helm
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx-helm
    spec:
      containers:
      - name: nginx-helm
        image: docker.io/openresty/openresty:1.19.9.1-0-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        envFrom:
        - secretRef:
            name: my-nginx-helm
        volumeMounts:
        - name: nginx-conf-helm
          mountPath: /usr/local/openresty/nginx/conf/
      volumes:
        - name: nginx-conf-helm
          configMap:
            name: my-nginx-helm
